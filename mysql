/*13. 고객의 지불정보를 총지불금액 내림차순, 다음과 같이 출력하시오
고객의 first_name, last_name, 총지불금액, 고객의 주소 address, address2, district, city, country
*/
select CU.first_name, CU.last_name, sum(PAY.amount), AD.address, AD.address2, AD.district, CT.city, CO.country
from customer as CU join payment as PAY on CU.customer_id = PAY.customer_id
					join address as AD on CU.address_id = AD.address_id
                    join city as CT on AD.city_id = CT.city_id
                    join country as CO on CT.country_id = CO.country_id
group by CU.customer_id
order by sum(PAY.amount) desc;

/*
	총 지불 금액별 고객 등급을 출력하고자 한다. 등급 구분과 출력 컬럼은 다음과 같다.(case 문 사용)
    'A' : 총 지불금액이 200이상
    'B' : 총 지불금액이 200미만 100이상
    'C' : 총 지불금액이 100미만 고객
    고객의 first_name, last_name, 총 지불금액, 등급
    총 지불금액이 많은 고객부터 출력
*/
select CU.first_name, CU.last_name, sum(PAY.amount) as 총지불금액, case when sum(PAY.amount) >= 200 then 'A'
											when sum(amount) >= 100 and sum(amount) < 200 then 'B'
											when sum(amount) < 100 then 'C'
                                            end as ranks
from customer as CU join payment as PAY on CU.customer_id = PAY.customer_id
group by CU.first_name, CU.last_name
order by sum(amount) desc;

/*
	DVD 대여 후 아직 반납하지 않은 고객정보를 다음의 정보로 출력한다.(case 문 사용)
    영화타이틀, 인벤토리ID, 매장ID, 고객의 first_name, last_name, 대여일자, 고객등급
*/

select F.title, IV.inventory_id, ST.store_id, CS.first_name, CS.last_name, RT.rental_date, case when sum(PAY.amount) >= 200 then 'A'
											when sum(PAY.amount) >= 100 and sum(PAY.amount) < 200 then 'B'
											when sum(PAY.amount) < 100 then 'C'
                                            end as ranks
from film as F join inventory as IV on F.film_id = IV.film_id
				join store as ST on IV.store_id = ST.store_id
                join rental as RT on IV.inventory_id = RT.inventory_id
                join payment as PAY on RT.rental_id = PAY.rental_id
				join customer as CS on PAY.customer_id = CS.customer_id
where RT.return_date is null
group by F.title, IV.inventory_id, IV.store_id, CS.first_name, CS.last_name
, RT.rental_date;

/*
	'2005-08-01' 부터 '2005-08-15' 사이, canada(country) alberta(district) 주에서 대여한
    영화의 타이틀 정보를 아래와 같이 출력하시오
    대여일, 영화 타이틀, 인벤토리ID, 매칭ID, 매장 전체 주소
*/

select RT.rental_date, F.title, IV.inventory_id, ST.store_id, AD.address, AD.address2, AD.district, CT.city, CO.country
from film as F join inventory as IV on F.film_id = IV.film_id
				join rental as RT on IV.inventory_id = RT.inventory_id
				join store as ST on IV.store_id = ST.store_id
                join address as AD on ST.address_id = AD.address_id
                join city as CT on AD.city_id = CT.city_id
                join country as CO on CT.country_id = CO.country_id
where RT.rental_date >= '2005-08-01' and RT.rental_date <= '2005-08-15'
	and CO.country = 'Canada'
    and AD.district = 'Alberta';
    
/*
	도시별 'Horror' 영화 대여정보를 알고자 한다. 도시와 대여수를 출력하라.
    대여수 내림차순, 도시명 오름차순으로 정렬하시오
*/
select count(RT.rental_id), CT.city
from rental as RT join customer as CS on RT.customer_id = CS.customer_id
					join inventory as IV on RT.inventory_id = IV.inventory_id
                    join film as F on IV.film_id = F.film_id
                    join film_category as FC on F.film_id = FC.film_id
                    join category as C on FC.category_id = C.category_id
					join address as AD on CS.address_id = AD.address_id
                    join city as CT on AD.city_id = CT.city_id
where C.name = 'Horror'
group by CT.city
order by count(RT.rental_id) desc, CT.city asc;

/*
	각 store 별 총 대여금액을 출력핫오.(store_id, 총 대여금액)
*/

select ST.store_id, sum(PAY.amount)
from store as ST join customer as CS on ST.store_id = CS.store_id
				join payment as PAY on CS.customer_id = PAY.customer_id
group by ST.store_id;


select count(store_id) from store;

/*
	대여된 영화 중 대여기관이 연제된 건을 다음의 정보로 조회하시오.
    영화타이틀, inventory_id, 대여일, 반납일, 기준대여기간, 실제대여기관
	** 아직 반납이 되지않은경우, 실제대여기간 컬럼에 'Unknown'을 출력
*/

select F.title, IV.inventory_id, RT.rental_date as '대여일', ifnull(RT.return_date, 'unknown') as '반납일', F.rental_duration as '기준대여기간', 
				ifnull(datediff(RT.return_date, RT.rental_date), 'unknown') as '실재대여가간'
from film as F join inventory as IV on F.film_id = IV.film_id
				join rental as RT on IV.inventory_id = RT.inventory_id
where datediff(ifnull(RT.return_date, curdate()), RT.rental_date) > F.rental_duration;

/*
	고객별 연체 건수가 많은 수부터 출력하시오(고객 first_name, last_name, 연체건수)
*/
select CS.first_name, CS.last_name, count(datediff(RT.return_date, RT.rental_date) > rental_duration) as '연체수'
from customer as CS join rental as RT on CS.customer_id = RT.customer_id
					join inventory as IV on RT.inventory_id = IV.inventory_id
                    join film as F on IV.film_id = F.film_id
group by CS.first_name, CS.last_name
order by count(datediff(RT.return_date, RT.rental_date) > rental_duration) desc;
                    
select CS.first_name, CS.last_name, count(RT.rental_id)
from rental RT join inventory IV on RT.inventory_id = IV.inventory_id
join film FL on IV.film_id = FL.film_id
join customer CS on RT.customer_id = CS.customer_id
where datediff(IFNULL(RT.return_date, curdate()), RT.rental_date) > FL.rental_duration
group by CS.first_name, CS.last_name
order by count(RT.rental_id) desc;

/*
	대여횟수 상위 5위 고객이 대여한 영화의 title을 알파벳순으로 출력
    출력 컬럼 : 고객이름(first, last), 영화제목, 총대여 수
*/

with top5(customer_id, tot_cnt)
as (
	select customer_id, count(rental_id) as tot_cnt
	from rental
	group by customer_id
	order by count(rental_id) desc
	limit 5
)
select CS.first_name, CS.last_name, FL.title, top5.tot_cnt
from top5 join rental RT on top5.customer_id = RT.customer_id
join inventory IV on RT.inventory_id = IV.inventory_id
join film FL on IV.film_id = FL.film_id
join customer CS on top5.customer_id = CS.customer_id
order by top5.tot_cnt desc, FL.title;



/*
	배우 'Walter torn' 보다 출연작이 많은 배우의 정보를, 배우ID,
    배우 이름(first_name, last_name), 출연작 타이틀, 작품 출시일을 
    출력하시오(정렬순서: 배우ID, 타이틀, 출시일
*/							


select id, famous_actor.f_name, famous_actor.l_name, FL.title
, FL.release_year
from (select AC.actor_id as id, AC.first_name as f_name
		, AC.last_name as l_name, count(film_id) as cnt
	from actor AC join film_actor FA on AC.actor_id = FA.actor_id
	group by id, f_name, l_name
	having cnt > (select count(film_id)
		from actor AC join film_actor FA 
        on AC.actor_id = FA.actor_id
		where AC.first_name = 'WALTER'
		and AC.last_name = 'TORN')) as famous_actor
join film_actor FA on famous_actor.id = FA.actor_id
join film FL on FA.film_id = FL.film_id
order by id, FL.title, FL.release_year;
